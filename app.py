import streamlit as st
import numpy as np
import pickle

# ржмрж╛ржВрж▓рж╛ ржлржирзНржЯ ржУ ржХрж╛рж╕рзНржЯржо рж╕рзНржЯрж╛ржЗрж▓ inject ржХрж░рж╛
st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Siyam+Rupali&display=swap');

    html, body, [class*="css"]  {
        font-family: 'Siyam Rupali', serif;
        background-color: #E0F7FA;
    }
    .stButton>button {
        background-color: #00838F;
        color: white;
        font-weight: bold;
    }
    .stSelectbox>div>div>div>select {
        color: #004D40;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Model рж▓рзЛржб
model = pickle.load(open('rainfall_model.pkl', 'rb'))

# Language select
lang = st.sidebar.selectbox("Select Language / ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи", ["English", "ржмрж╛ржВрж▓рж╛"])

if lang == "English":
    wind_dir_map = {
        'N': 0, 'NNE': 1, 'NE': 2, 'ENE': 3, 'E': 4, 'ESE': 5,
        'SE': 6, 'SSE': 7, 'S': 8, 'SSW': 9, 'SW': 10, 'WSW': 11,
        'W': 12, 'WNW': 13, 'NW': 14, 'NNW': 15
    }
    rain_today_map = {'Yes': 1, 'No': 0}

    title = "ЁЯМзя╕П Rainfall Prediction App"
    subtitle = "Enter today's weather data to predict if it will rain tomorrow."
    inputs = {
        "Max Temperature (┬░C)": 30.0,
        "Rainfall (mm)": 0.0,
        "Evaporation (mm)": 5.0,
        "Sunshine (hours)": 7.0,
        "Wind Gust Direction": list(wind_dir_map.keys()),
        "Wind Gust Speed (km/h)": 35.0,
        "Humidity at 9AM (%)": (0, 100, 70),
        "Humidity at 3PM (%)": (0, 100, 50),
        "Pressure at 9AM (hPa)": 1010.0,
        "Pressure at 3PM (hPa)": 1008.0,
        "Cloud at 9AM (oktas)": (0, 8, 4),
        "Cloud at 3PM (oktas)": (0, 8, 4),
        "Temperature at 3PM (┬░C)": 29.0,
        "Did it rain today?": ['Yes', 'No'],
        "RISK_MM (Risk of rain in mm)": 0.0
    }
    predict_btn = "ЁЯУК Predict Rainfall Tomorrow"
    rain_yes = "ЁЯМзя╕П Rain Expected Tomorrow!"
    rain_no = "тШАя╕П No Rain Expected Tomorrow."
    error_msg = "Prediction failed: "
else:
    wind_dir_map = {
        'ржЙрждрзНрждрж░': 0, 'ржЙрждрзНрждрж░-ржЙрждрзНрждрж░-ржкрзВрж░рзНржм': 1, 'ржЙрждрзНрждрж░-ржкрзВрж░рзНржм': 2, 'ржкрзВрж░рзНржм-ржЙрждрзНрждрж░-ржкрзВрж░рзНржм': 3,
        'ржкрзВрж░рзНржм': 4, 'ржкрзВрж░рзНржм-ржжржХрзНрж╖рж┐ржг-ржкрзВрж░рзНржм': 5, 'ржжржХрзНрж╖рж┐ржг-ржкрзВрж░рзНржм': 6, 'ржжржХрзНрж╖рж┐ржг-ржжржХрзНрж╖рж┐ржг-ржкрзВрж░рзНржм': 7,
        'ржжржХрзНрж╖рж┐ржг': 8, 'ржжржХрзНрж╖рж┐ржг-ржжржХрзНрж╖рж┐ржг-ржкрж╢рзНржЪрж┐ржо': 9, 'ржжржХрзНрж╖рж┐ржг-ржкрж╢рзНржЪрж┐ржо': 10, 'ржкрж╢рзНржЪрж┐ржо-ржжржХрзНрж╖рж┐ржг-ржкрж╢рзНржЪрж┐ржо': 11,
        'ржкрж╢рзНржЪрж┐ржо': 12, 'ржкрж╢рзНржЪрж┐ржо-ржЙрждрзНрждрж░-ржкрж╢рзНржЪрж┐ржо': 13, 'ржЙрждрзНрждрж░-ржкрж╢рзНржЪрж┐ржо': 14, 'ржЙрждрзНрждрж░-ржЙрждрзНрждрж░-ржкрж╢рзНржЪрж┐ржо': 15
    }
    rain_today_map = {'рж╣рзНржпрж╛ржБ': 1, 'ржирж╛': 0}

    title = "ЁЯМзя╕П ржмрзГрж╖рзНржЯрж┐рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржЕрзНржпрж╛ржк"
    subtitle = "ржЖржЧрж╛ржо ржмрзГрж╖рзНржЯрж┐рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржкрзЗрждрзЗ ржЖржЬржХрзЗрж░ ржЖржмрж╣рж╛ржУрзЯрж╛рж░ рждржерзНржп ржжрж┐ржиред"
    inputs = {
        "рж╕рж░рзНржмрзЛржЪрзНржЪ рждрж╛ржкржорж╛рждрзНрж░рж╛ (┬░C)": 30.0,
        "ржмрзГрж╖рзНржЯрж┐рж░ ржкрж░рж┐ржорж╛ржг (ржорж┐ржорж┐)": 0.0,
        "ржмрж╛рж╖рзНржкрзАржнржмржи (ржорж┐ржорж┐)": 5.0,
        "рж╕рзВрж░рзНржпрж╛рж▓рзЛржХ (ржШржирзНржЯрж╛)": 7.0,
        "ржжржоржХрж╛ ржмрж╛рждрж╛рж╕рзЗрж░ ржжрж┐ржХ": list(wind_dir_map.keys()),
        "ржжржоржХрж╛ ржмрж╛рждрж╛рж╕рзЗрж░ ржЧрждрж┐ (ржХрж┐ржорж┐/ржШржгрзНржЯрж╛)": 35.0,
        "рж╕ржХрж╛рж▓ рзпржЯрж╛рзЯ ржЖрж░рзНржжрзНрж░рждрж╛ (%)": (0, 100, 70),
        "ржмрж┐ржХрж╛рж▓ рзйржЯрж╛рзЯ ржЖрж░рзНржжрзНрж░рждрж╛ (%)": (0, 100, 50),
        "рж╕ржХрж╛рж▓ рзпржЯрж╛рзЯ ржЪрж╛ржк (hPa)": 1010.0,
        "ржмрж┐ржХрж╛рж▓ рзйржЯрж╛рзЯ ржЪрж╛ржк (hPa)": 1008.0,
        "рж╕ржХрж╛рж▓ рзпржЯрж╛рзЯ ржорзЗржШ (рзж-рзо)": (0, 8, 4),
        "ржмрж┐ржХрж╛рж▓ рзйржЯрж╛рзЯ ржорзЗржШ (рзж-рзо)": (0, 8, 4),
        "ржмрж┐ржХрж╛рж▓ рзйржЯрж╛рзЯ рждрж╛ржкржорж╛рждрзНрж░рж╛ (┬░C)": 29.0,
        "ржЖржЬ ржХрж┐ ржмрзГрж╖рзНржЯрж┐ рж╣рзЯрзЗржЫрзЗ?": ['рж╣рзНржпрж╛ржБ', 'ржирж╛'],
        "ржмрзГрж╖рзНржЯрж┐рж░ ржЭрзБржБржХрж┐ (RISK_MM)": 0.0
    }
    predict_btn = "ЁЯУК ржмрзГрж╖рзНржЯрж┐рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржжрзЗржЦрзБржи"
    rain_yes = "ЁЯМзя╕П ржЖржЧрж╛ржорзАржХрж╛рж▓ ржмрзГрж╖рзНржЯрж┐ рж╣рждрзЗ ржкрж╛рж░рзЗ!"
    rain_no = "тШАя╕П ржЖржЧрж╛ржорзАржХрж╛рж▓ ржмрзГрж╖рзНржЯрж┐ рж╣ржУрзЯрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржХржоред"
    error_msg = "ржкрзВрж░рзНржмрж╛ржнрж╛рж╕рзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: "

st.title(title)
st.markdown(subtitle)

max_temp = st.number_input(list(inputs.keys())[0], value=inputs[list(inputs.keys())[0]])
rainfall = st.number_input(list(inputs.keys())[1], value=inputs[list(inputs.keys())[1]])
evaporation = st.number_input(list(inputs.keys())[2], value=inputs[list(inputs.keys())[2]])
sunshine = st.number_input(list(inputs.keys())[3], value=inputs[list(inputs.keys())[3]])

wind_gust_dir_label = st.selectbox(list(inputs.keys())[4], inputs[list(inputs.keys())[4]])
wind_gust_dir = wind_dir_map[wind_gust_dir_label]

wind_gust_speed = st.number_input(list(inputs.keys())[5], value=inputs[list(inputs.keys())[5]])

humidity_9am = st.slider(list(inputs.keys())[6], *inputs[list(inputs.keys())[6]])
humidity_3pm = st.slider(list(inputs.keys())[7], *inputs[list(inputs.keys())[7]])

pressure_9am = st.number_input(list(inputs.keys())[8], value=inputs[list(inputs.keys())[8]])
pressure_3pm = st.number_input(list(inputs.keys())[9], value=inputs[list(inputs.keys())[9]])

cloud_9am = st.slider(list(inputs.keys())[10], *inputs[list(inputs.keys())[10]])
cloud_3pm = st.slider(list(inputs.keys())[11], *inputs[list(inputs.keys())[11]])

temp_3pm = st.number_input(list(inputs.keys())[12], value=inputs[list(inputs.keys())[12]])

rain_today_label = st.selectbox(list(inputs.keys())[13], list(rain_today_map.keys()))
rain_today = rain_today_map[rain_today_label]

risk_mm = st.number_input(list(inputs.keys())[14], value=inputs[list(inputs.keys())[14]])

input_data = np.array([[
    max_temp, rainfall, evaporation, sunshine,
    wind_gust_dir, wind_gust_speed,
    humidity_9am, humidity_3pm, pressure_9am, pressure_3pm,
    cloud_9am, cloud_3pm, temp_3pm,
    rain_today, risk_mm
]])

if st.button(predict_btn):
    try:
        prediction = model.predict(input_data)[0]
        if prediction == 1:
            st.success(rain_yes)
        else:
            st.info(rain_no)
    except Exception as e:
        st.error(error_msg + str(e))
